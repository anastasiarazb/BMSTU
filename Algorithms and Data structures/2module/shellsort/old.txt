#ifndef OLD_TXT
#define OLD_TXT
// valgrind /home/nastasia/Qt/2module/shellsort-Debug/shellsort

//Метод Шелла является модификацией сортировки вставками, в которой переменная
//loc на каждой итерции внутреннего цикла уменьшается на некоторое число d ≥ 1.
//При этом фактически сортировка выполняется несколько раз для всё меньших и
//меньших значений d до тех пор, пока d не станет равно 1. Тем самым, сначала
//выполняется серия «грубых» сортировок, которые не дают точного ответа, но
//делают последовательность более упорядоченной, обеспечивая более быстрое
//выполнение финальной точной сортировки при d = 1.

//nel – количество элементов в последовательности; compare – указатель на
//функцию сравнения, которая возвращает -1, если i-тый элемент меньше j-того, 0
//– в случае, если i-тый элемент равен j-тому, и 1 – в случае, если i-тый
//элемент больше j-того; swap – указатель на функцию обмена i-того и j-того
//элементов последовательности. Значения расстояния d в ходе работы функции
//должны образовывать последовательность Фибоначчи (естественно, записанную
//задом наперёд). Первое значение в этой последовательности должно быть
//максимальным числом Фибоначчи, которое меньше значения параметра nel.

//(loc = i; loc >= d && (compare(loc-d, loc) == 1); loc--) нафига нам вложенные циклы? и точно ли для
//всех пар до начала можно использовать сразу, что до после какого-то значения они уже упорядочены?
#include <stdlib.h>
#include <stdio.h>

int *array;

int compare(unsigned long i, unsigned long j)
{
        if (i <= j) {
                printf("COMPARE [%lu] [%lu] %d %d\n", i, j, array[i], array[j]);
        } else {
                printf("COMPARE [%lu] [%lu] %d %d\n",j, i, array[j], array[i]);
        }

        if (array[i] == array[j]) return 0;
        return array[i] < array[j] ? -1 : 1;
}

void swap(unsigned long i, unsigned long j)
{
//        if (i <= j) {
//                printf("SWAP [%lu] [%lu] %d %d\n", i, j, array[i], array[j]);
//        } else {
//                printf("SWAP [%lu] [%lu] %d %d\n", j, i, array[j], array[i]);
//        }

        int t = array[i];
        array[i] = array[j];
        array[j] = t;
}

void shellsort(unsigned long,
        int (*)(unsigned long, unsigned long),
        void (*)(unsigned long, unsigned long));

unsigned long *fib; //массив с числами фибоначчи
unsigned long make_fib_array(unsigned long nel);

int main(void)
{
        int i;
        int n;
        scanf("%d", &n);

        array = (int*)malloc(n * sizeof(int));
        for (i = 0; i < n; i++) scanf("%d", array+i);

                shellsort(n, compare, swap);
                for (i = 0; i < n; i++) printf("%d ", array[i]);
                printf("\n");

        free(array);
        return 0;
}



void shellsort(unsigned long nel, int (*compare)(unsigned long i, unsigned long j),
               void (*swap)(unsigned long i, unsigned long j)){

    unsigned long i, d, loc;
    unsigned long j;                //Индекс числа в фибоначчиевой строке
    j = make_fib_array(nel);        //Заполнить массив числами Фибоначчи и установить счетчик на последний элемент
    while(j--){                     //fib[] = {0, 1 ...} => на последней итерации fib[1] = 1. Двигаемся до конца.
        d = fib[j];                 //Взятие ширины шага из массива с числами Фибоначчи
        for(i = d; i < nel; i++){
            for(loc = i; loc >= d && (compare(loc-d, loc) == 1); loc--){    //Для каждой пары чисел, отстоящих друг от друга на расстояние d,
                swap(loc, loc-d);                                           //сравниваем их и меняем местами, если нужно.
            }
        }
    }
    free(fib);
}

unsigned long len_fib_array(unsigned long nel)
{
    unsigned long fib1 = 1, fib2 = 2, temp, i;
    if (nel < 3) return 3;
    for (i = 3; fib2 < nel; ++i){
        temp = fib2;
        fib2 += fib1;
        fib1 = temp;
    }
    return i;
}

unsigned long make_fib_array(unsigned long nel)
{
    unsigned long i = 2;
//    fib = (unsigned long *)malloc(4*sizeof(unsigned long));
    fib = (unsigned long *)malloc(len_fib_array(nel)*sizeof(unsigned long));
    fib[0] = 0;     //Ввод первых чисел. Начинаем с 0 для того, чтобы беззнаковый счетчик
    fib[1] = 1;     //в shellsort не нужно было проверять на >= 0, т.к. для беззнаковых чисел выражение всегда истинно
    fib[2] = 2;
    for(i = 2; fib[i] < nel; ++i){
        fib[i+1] = fib[i] + fib[i-1];/*
        fib = realloc(fib, (i+3)*sizeof(unsigned long)); //Увеличиваем размер памяти под массив
        i++;*/
    }
    return --i; //Вернуть индекс наибольшего элемента
}

#endif // OLD_TXT
