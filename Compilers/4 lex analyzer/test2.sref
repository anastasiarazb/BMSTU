//FROM Library
$EXTERN WriteLine;

//FROM LibraryEx
$EXTERN Inc, Dec, Fetch, LoadFile, Map, Reduce;

//Шагаем вперед и инкрементируем позицию, пока пробел, иначе возвращаем строку как есть
EatSpase {
    s.line s.pos ('\t' e.str) e.tail = <EatSpase s.line <Inc s.pos> (e.str) e.tail>;
    s.line s.pos ('\n' e.str) e.tail = <EatSpase s.line <Inc s.pos> (e.str) e.tail>;
    s.line s.pos (' '  e.str) e.tail = <EatSpase s.line <Inc s.pos> (e.str) e.tail>;
    s.line s.pos (s.1 e.str)  e.tail = s.line s.pos (s.1 e.str) e.tail;
    s.line s.pos (e.str)      e.tail = <EatSpase <Inc s.line> 1 e.tail>;
    s.line s.pos              e.tail = s.line s.pos ();
}

Or {
    #TRUE  #TRUE  = #TRUE;
    #TRUE  #FALSE = #TRUE;
    #FALSE #TRUE  = #TRUE;
    #FALSE #FALSE = #FALSE;
}

IsIn {
    s.a e.1 = <Reduce Or #FALSE <Map (Cmp s.a) e.1>>;
}

//Функция сравнения символов
Cmp {
        s.a s.a = #TRUE;
        e.1 = #FALSE;
}

IsLetter {
        s.a = <IsIn s.a 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'>;
        e.1 = #FALSE;
}

IsSpace {
        s.a = <IsIn s.a '\n\t '>;
        e.1 = #FALSE;
}

IsDigit {
        s.a = <IsIn s.a '0123456789'>;
        e.1 = #FALSE;
}
    

//Position.Cp
GetSymbol2 {  
    s.line s.pos (s.1 e.str) e.last = (s.1) s.line <Inc s.pos> (e.str) e.last;
    s.line s.pos ()                 = ()    s.line    1;
    s.line s.pos ()          e.last = () <Inc s.line> 1 e.last;
}

//Position.Cp
GetSymbol {
    s.line_num s.pos         = ('-1') s.line_num s.pos; /* EOF */
    s.line_num s.pos e.tail  = <GetSymbol2 s.line_num s.pos e.tail>; 
}

GetWord3 {
    (e.word) ('-1')     s.line_num s.pos e.tail = ('-1')     (e.word)          s.line_num s.pos e.tail;
    (e.word) (e.symbol) s.line_num s.pos e.tail = (e.symbol) (e.word e.symbol) s.line_num s.pos e.tail;
}

GetWord2 {
    s.size ('-1')          (e.word) s.line_num s.pos e.line =  #FALSE (e.word) s.line_num s.pos e.line; //EOF
         0 (e.last_symbol) (e.word) s.line_num s.pos e.line =  #TRUE  (e.word) s.line_num s.pos e.line; //Слово прочитано
    s.size (e.last_symbol) (e.word) s.line_num s.pos e.line = /* Дочитать остаток слова */
        <GetWord2 <Dec s.size> <GetWord3 (e.word) <GetSymbol s.line_num s.pos e.line>>>;
}

GetWord {
    s.size s.line_num s.pos e.line = <GetWord2 s.size () () s.line_num s.pos e.line>;
}

EatComment {
    s.line_num s.pos e.line = 
        <Fetch <Fetch <GetWord 2 s.line_num s.pos e.line> {
                        e.bool ('*)' e.word_tail) s.line_numE s.posE e.tail  = 
                            #TRUE 
                            <EatTokenAndPack (#COMMENT) 2 s.line_num s.pos e.line>
                            <NextToken <EatToken 2 s.line_num s.pos e.line>>;
                        e.bool ('}'  e.word_tail) s.line_numE s.posE e.tail  = 
                            #TRUE 
                            <EatTokenAndPack (#COMMENT) 1 s.line_num s.pos e.line>
                            <NextToken <EatToken 1 s.line_num s.pos e.line>>;
                        // Нашли EOF
                        #FALSE () s.line_numE s.posE e.tail                  = 
                            #TRUE 
                            <EatTokenAndPack (#EOF) 1 s.line_num s.pos e.line>;
                        e.default = #FALSE;
                    }
            > {
                #TRUE e.end = e.end;
                #FALSE e.end = <Fetch <GetSymbol s.line_num s.pos e.line> {
                                    (e.symbol) s.line_num2 s.pos2 e.tail2 = <EatComment s.line_num2 s.pos2 e.tail2>;
                                }>;
            }>;
}

TestIdent3 {
    (e.1 e.1) = #TRUE;
    (e.1) = #FALSE;
}

Dublicate {
    e.1 = e.1 e.1;
}

TestIdent2 {
    s.lastRecognizeSize (e.lastRecognize) s.size (e.word) (e.symbol) s.line_num s.pos e.line (e.skip_sym) s.line_num2 s.pos2 e.line2 = <Fetch <IsLetter e.symbol> {
                                                    #TRUE = <Fetch <TestIdent3 (e.word e.symbol)> {
                                                                                #TRUE  =   <TestIdent2 <Inc s.size> (e.word e.symbol) <Inc s.size> (e.word e.symbol) 
                                                                                            <GetSymbol s.line_num s.pos e.line> (e.skip_sym) s.line_num s.pos e.line>;
                                                                                #FALSE =  <TestIdent2 s.lastRecognizeSize (e.lastRecognize) <Inc s.size> (e.word e.symbol) 
                                                                                            <GetSymbol s.line_num s.pos e.line> (e.skip_sym) s.line_num2 s.pos2 e.line2>;
                                                                            }>;
                                                    #FALSE = <Fetch s.lastRecognizeSize {
                                                                    0                   = #FALSE;
                                                                    s.lastRecognizeSize = #TRUE (e.lastRecognize) s.lastRecognizeSize s.line_num2 s.pos2 e.line2;
                                                                    }>;
                                                }>;
}

TestIdent {
    s.line_num s.pos e.line = <TestIdent2 0 () 0 () <Dublicate <GetSymbol s.line_num s.pos e.line>>>;
}

PrintConsole {
    0 e.last = ;
    s.size (#IDENT)        (e.image) s.lineS s.posS s.lineE s.posE 
        = <WriteLine 'IDENT        ( 's.lineS ', ' s.posS') - ( 's.lineE ', ' s.posE') : ' e.image>;
    s.size (#COMMENT)      (e.image) s.lineS s.posS s.lineE s.posE 
        = <WriteLine 'COMMENT      ( 's.lineS ', ' s.posS') - ( 's.lineE ', ' s.posE') : ' e.image>;
    s.size (#SYNTAX_ERROR) (e.image) s.lineS s.posS s.lineE s.posE 
        = <WriteLine 'SYNTAX_ERROR ( 's.lineS ', ' s.posS') - ( 's.lineE ', ' s.posE') : ' e.image>;
    s.size (#KEYWORD)      (e.image) s.lineS s.posS s.lineE s.posE 
        = <WriteLine 'KEYWORD      ( 's.lineS ', ' s.posS') - ( 's.lineE ', ' s.posE') : ' e.image>;
    s.size (#EOF)          (e.image) s.lineS s.posS s.lineE s.posE 
        = <WriteLine 'EOF          ( 's.lineS ', ' s.posS') - ( 's.lineE ', ' s.posE') : ' '-1'>;
}

PrintToken {
    (e.PackedLexem) e.tail = <PrintConsole e.PackedLexem> <PrintToken e.tail>;
    = ;
}

PackToken {
    0 e.last = ;
    s.size (e.type) (e.image) s.lineS s.posS s.lineE s.posE = (s.size (e.type) (e.image) s.lineS s.posS s.lineE s.posE);
}


EatToken {
    s.size s.line_num s.pos e.line = <Fetch <GetWord s.size s.line_num s.pos e.line> { 
                                                    e.bool (e.word) s.line_numE s.posE e.tail = s.line_numE s.posE e.tail;
                                              }>;
}

EatTokenAndPack {
    (e.type) s.size s.line_num s.pos e.line = <Fetch <GetWord s.size s.line_num s.pos e.line> { 
                                                    e.bool (e.word) s.line_numE s.posE e.tail = <PackToken s.size (e.type) (e.word) s.line_num s.pos s.line_numE s.posE>;
                                              }>;
}

FlushSyntaxError {
    0 (e.text_skip) s.line_numS s.posS s.line_End s.endS = ;
    s.skiped (e.text_skip) s.line_numS s.posS s.line_End s.endS 
        = <PackToken s.skiped (#SYNTAX_ERROR) (e.text_skip) s.line_numS s.posS s.line_End s.endS>;
}

NextSpace2 {
    s.size () s.line_num s.pos e.line = s.size;
    s.size (' ') s.line_num s.pos e.line = s.size;
    s.size ('\n') s.line_num s.pos e.line = s.size;
    s.size ('\t') s.line_num s.pos e.line = s.size;
    s.size (e.symbol) s.line_num s.pos e.line = <NextSpace2 <Inc s.size> <GetSymbol s.line_num s.pos e.line>>;
}

NextSpace {
    s.line_num s.pos e.line = <NextSpace2 0 <GetSymbol s.line_num s.pos e.line>>;
}

NextToken_inner {
    s.line_num s.pos e.line = 
                            <Fetch <GetWord 4 s.line_num s.pos e.line> {
                                      //Switch-case
                                        e.bool ('ifif') s.line_numE s.posE e.tail
                                            = <EatTokenAndPack (#KEYWORD) 4 s.line_num s.pos e.line>
                                              <NextToken <EatToken 4 s.line_num s.pos e.line>>;

                                        e.bool ('dodo') s.line_numE s.posE e.tail           = 
                                            <EatTokenAndPack (#KEYWORD) 4 s.line_num s.pos e.line>
                                            <NextToken <EatToken 4 s.line_num s.pos e.line>>;

                                        e.bool ('do' e.word_tail) s.line_numE s.posE e.tail = 
                                            <EatTokenAndPack (#KEYWORD) 2 s.line_num s.pos e.line>
                                            <NextToken <EatToken 2 s.line_num s.pos e.line>>;

                                        e.bool ('(*' e.word_tail) s.line_numE s.posE e.tail = 
                                            <EatTokenAndPack (#COMMENT) 2 s.line_num s.pos e.line>
                                            <EatComment <EatToken 2 s.line_num s.pos e.line>>;

                                        e.bool ('{' e.word_tail) s.line_numE s.posE e.tail  = 
                                            <EatTokenAndPack (#COMMENT) 1 s.line_num s.pos e.line>
                                            <EatComment <EatToken 1 s.line_num s.pos e.line>>;
                                        // Нашли EOF

                                        #FALSE () s.line_numE s.posE e.tail                 = 
                                            <EatTokenAndPack (#EOF) 1 s.line_num s.pos e.line>;
                                        e.default = 
                                            <Fetch <TestIdent s.line_num s.pos e.line> {
                                                #TRUE (e.lexem) s.lexSize s.line_num2 s.pos2 e.line2 = 
                                                    <EatTokenAndPack (#IDENT) s.lexSize s.line_num s.pos e.line>
                                                    <NextToken <EatToken s.lexSize s.line_num s.pos e.line>>;
                                                #FALSE = 
                                                    <Fetch <NextSpace s.line_num s.pos e.line> {
                                                        s.size = <EatTokenAndPack (#SYNTAX_ERROR) s.size s.line_num s.pos e.line>
                                                                 <NextToken <EatToken s.size s.line_num s.pos e.line>>;
                                                    }>;
                                                    
                                                                                                  
                                            }>;
                            }>;
}

NextToken {
    s.line_num s.pos e.line = <NextToken_inner <EatSpase s.line_num s.pos e.line>>;
}

Parse {
    s.line_num s.pos e.line = <NextToken s.line_num s.pos e.line>;
}

$ENTRY Go {
    = <PrintToken <Parse 1 1 <LoadFile 'text'> > >;
}
